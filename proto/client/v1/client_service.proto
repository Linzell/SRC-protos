// Copyright Charlie Cohen <linzellart@gmail.com>
//
// Licensed under the GNU General Public License, Version 3.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.gnu.org/licenses/gpl-3.0.html
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// List of available options:
// https://github.com/yoheimuta/protolint/blob/master/_example/config/.protolint.yaml

syntax = "proto3";

package client.v1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

import "client/v1/notifications.proto";
import "client/v1/privacy.proto";
import "client/v1/security.proto";
import "client/v1/settings.proto";
import "client/v1/user.proto";

// ClientService
service ClientService {
    // ReadUser
    rpc ReadUser(google.protobuf.Empty) returns (stream User) {
        option (google.api.http) = {
            get: "/v1/user/read"
        };
    }

    // DeleteUser
    rpc DeleteUser(google.protobuf.Empty) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/user/delete"
        };
    }

    // DisableUser
    rpc DisableUser(google.protobuf.Empty) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/user/disable"
        };
    }

    // SendEmailToChangeEmail
    rpc SendEmailToChangeEmail(google.protobuf.Empty) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/user/send_email_to_change_email"
        };
    }

    // SendEmailToChangePassword
    rpc SendEmailToChangePassword(google.protobuf.Empty) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/user/send_email_to_change_password"
        };
    }

    // UpdateEmail
    rpc UpdateEmail(UpdateEmailRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/user/update_email"
            body: "*"
        };
    }

    // UpdatePassword
    rpc UpdatePassword(UpdatePasswordRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/user/update_password"
            body: "*"
        };
    }

    // UploadAvatar
    rpc UploadAvatar(UploadAvatarRequest) returns (UploadAvatarResponse) {
        option (google.api.http) = {
            post: "/v1/user/upload_avatar"
            body: "*"
        };
    }

    // UpdateLanguage
    rpc UpdateLanguage(UpdateLanguageRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/user/update_language"
            body: "*"
        };
    }

    // UpdateTheme
    rpc UpdateTheme(UpdateThemeRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/user/update_theme"
            body: "*"
        };
    }

    // UpdateNotifications
    rpc UpdateNotifications(UpdateNotificationsRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/user/update_notifications"
            body: "*"
        };
    }

    // UpdatePrivacy
    rpc UpdatePrivacy(UpdatePrivacyRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/user/update_privacy"
            body: "*"
        };
    }

    // UpdateSecurity
    rpc UpdateSecurity(UpdateSecurityRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/user/update_security"
            body: "*"
        };
    }
}
